@model SitemapModel
@using Nop.Core.Domain.Seo
@using Nop.Core.Domain.Common
@using Nop.Core
@using Nop.Services.Configuration
@using Nop.Services.Media
@using Nop.Web.Models.Sitemap;
@inject ISettingService settingService
@inject IPictureService pictureService
@inject IStoreContext storeContext
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Sitemap").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-sitemap-page");
}
@{
    var store = await storeContext.GetCurrentStoreAsync();
    var breadcrumbBackgroundPictureId = await settingService.GetSettingByKeyAsync<int>("berrysettings.breadcrumbbackgroundpictureid", storeId: store.Id, loadSharedValueIfNotFound: true);
    var breadcrumbBackgroundPictureUrl = await pictureService.GetPictureUrlAsync(breadcrumbBackgroundPictureId);
}
@section Breadcrumb {
    <div class="breadcrumb" style="background-image: url('@breadcrumbBackgroundPictureUrl');">
        <div class="page-title">
            <h1>@T("Sitemap")</h1>
            @*<div class="description">
                <p>@T("Sitemap.Description")</p>
            </div>*@
        </div>
    </div>
}
<div class="page sitemap-page">
    <div class="page-body">
        <div class="description">
            @T("Sitemap.Description")
        </div>
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.SitemapBefore })
        @foreach (var itemGroup in Model.Items.GroupBy(itemGroup => itemGroup.GroupTitle))
        {
    <div class="entity">
        <div class="entity-title">
            <h2>@itemGroup.Key</h2>
        </div>
        <div class="entity-body">
            <ul>
                @foreach (var item in itemGroup.ToList())
                {
    <li><a href="@item.Url">@item.Name</a></li>}
            </ul>
        </div>
    </div>}
        @{
            var pager = Html.Pager(Model.PageModel).QueryParam("pagenumber");
            if (!(await pager.IsEmpty()))
            {
                <div class="pager">
                    @pager
                </div>
            }
        }
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.SitemapAfter })
    </div>
</div>
