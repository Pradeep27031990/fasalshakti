@model ChangePasswordModel
@using Nop.Core.Domain.Seo
@using Nop.Core.Domain.Common
@using Nop.Core
@using Nop.Services.Configuration
@using Nop.Services.Media
@inject ISettingService settingService
@inject IPictureService pictureService
@inject IStoreContext storeContext
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsTwo";

    //title
    NopHtml.AddTitleParts(T("PageTitle.Account").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-account-page");
    NopHtml.AppendPageCssClassParts("html-change-password-page");
}

@{
    var store = await storeContext.GetCurrentStoreAsync();
    var breadcrumbBackgroundPictureId = await settingService.GetSettingByKeyAsync<int>("berrysettings.breadcrumbbackgroundpictureid", storeId: store.Id, loadSharedValueIfNotFound: true);
    var breadcrumbBackgroundPictureUrl = await pictureService.GetPictureUrlAsync(breadcrumbBackgroundPictureId);
}

@section left
    {
    @await Component.InvokeAsync(typeof(CustomerNavigationViewComponent), new { selectedTabId = CustomerNavigationEnum.ChangePassword })
}
@section Breadcrumb
    {
    <div class="breadcrumb" style="background-image: url('@breadcrumbBackgroundPictureUrl');">
        <div class="page-title">
            <h1>@T("Account.MyAccount") - @T("Account.ChangePassword")</h1>
        </div>
    </div>
}

<div class="page account-page change-password-page">
    <div class="page-title">
        <h1>@T("Account.MyAccount") - @T("Account.ChangePassword")</h1>
    </div>
    <div class="page-body">
		@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CustomerChangePasswordTop, additionalData = Model })
        <form asp-route="CustomerChangePassword" method="post" autocomplete="off">
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
            <div class="fieldset">
                <div class="form-fields">
					<div class="warnings">
						@if (Model.PasswordExpired)
						{
							<p>@T("Account.ChangePassword.PasswordIsExpired")</p>
						}
						@if (Model.PasswordMustBeChanged)
						{
							<p>@T("Account.ChangePassword.MustBeChanged")</p>
						}
					</div>
                    <div class="inputs">
                        <label asp-for="OldPassword" asp-postfix=":"></label>
						<div class="form-input-wrapper">
							<input asp-for="OldPassword" />
							<div class="change-password-recovery-link">
								<a asp-route="PasswordRecovery">@T("Account.Login.ForgotPassword")</a>
							</div>
						</div>
                        <nop-required />
                        <span asp-validation-for="OldPassword"></span>
                    </div>
                    <div class="inputs">
                        <label asp-for="NewPassword" asp-postfix=":"></label>
                        <input asp-for="NewPassword" class="form-control" />
                        <nop-required />
                        <span asp-validation-for="NewPassword"></span>
                    </div>
                    <div class="inputs">
                        <label asp-for="ConfirmNewPassword" asp-postfix=":"></label>
                        <input asp-for="ConfirmNewPassword" class="form-control" />
                        <nop-required />
                        <span asp-validation-for="ConfirmNewPassword"></span>
                    </div>
                </div>
            </div>
            <div class="buttons">
                <button type="submit" class="button-1 change-password-button">@T("Account.ChangePassword.Button")</button>
            </div>
        </form>
		@await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.CustomerChangePasswordBottom, additionalData = Model })
    </div>
</div>