@model NewsItemListModel
@using Nop.Core.Domain.Seo
@using Nop.Core.Domain.Common
@using Nop.Core
@using Nop.Services.Configuration
@using Nop.Services.Media
@inject ISettingService settingService
@inject IPictureService pictureService
@inject IStoreContext storeContext
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{ Layout = "_ColumnsTwo";

    //title
    NopHtml.AddTitleParts(T("PageTitle.NewsArchive").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-news-list-page"); }


@{ var store = await storeContext.GetCurrentStoreAsync();
                var breadcrumbBackgroundPictureId = await settingService.GetSettingByKeyAsync<int>("berrysettings.breadcrumbbackgroundpictureid", storeId: store.Id, loadSharedValueIfNotFound: true);
                var breadcrumbBackgroundPictureUrl = await pictureService.GetPictureUrlAsync(breadcrumbBackgroundPictureId); }

@section Breadcrumb {
    <div class="breadcrumb" style="background-image: url('@breadcrumbBackgroundPictureUrl');">
        <div class="page-title">
            <h1>@T("News")</h1>
            <a href="@Url.RouteUrl("NewsRSS", new { languageId = Model.WorkingLanguageId })" class="link-rss" title="@T("News.RSS.Hint")">@T("News.RSS")</a>
        </div>
    </div>
}
<div class="page news-list-page">
    <div class="page-body">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.NewsListPageBeforeItems })
        <div class="news-items">
            @foreach (var item in Model.NewsItems)
            {
<div class="news-item">
    <div class="news-head">
        <a class="news-title" href="@Url.RouteUrl("NewsItem", new { SeName = item.SeName })">@item.Title</a>
        <span class="news-date">-@item.CreatedOn.ToString("D")</span>
    </div>
    <div class="news-body">
        @Html.Raw(item.Short)
    </div>
    <div class="buttons">
        <a href="@Url.RouteUrl("NewsItem", new { SeName = item.SeName })" class="read-more">@T("News.MoreInfo")</a>
    </div>
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.NewsListPageInsideItem, additionalData = item })
</div>  }
        </div>
        @{ var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber"); }
        @if (!(await pager.IsEmpty()))
        {
<div class="pager">
    @pager
</div>}
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.NewsListPageAfterItems })
    </div>
</div>
