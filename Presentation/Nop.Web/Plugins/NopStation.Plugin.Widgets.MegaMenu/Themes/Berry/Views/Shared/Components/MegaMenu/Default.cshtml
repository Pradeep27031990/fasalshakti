@using Nop.Web.Components;
@model MegaMenuModel
@{
    NopHtml.AppendCssFileParts($"/Plugins/NopStation.Plugin.Widgets.MegaMenu/Themes/Berry/content/css/megamenu.css", string.Empty);
}

<div class="mm-navbar">
    <button class="mm-close-button">
        <i class="fas fa-times"></i>
    </button>
    <ul class="mm-navbar-nav">
        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuBefore })
        @if (Model.DisplayHomePageMenuItem)
        {
            <li class="mm-nav-item first-lebel-nav"><a href="@Url.RouteUrl("HomePage")">@T("Categories.Breadcrumb.Top")</a></li>
        }

        @if (Model.Categories.Any())
        {
            @foreach (var category in Model.Categories)
            {
                var categoryLineModel = new MegaMenuModel.CategoryLineModel
                {
                    Category = category,
                    MaxLevel = Model.MaxCategoryLevelsToShow
                };
                @await Html.PartialAsync("_CategoryLine.MegaMenu.cshtml", categoryLineModel)
            }
        }
        @if (Model.Manufacturers.Any())
        {
            <li class="mm-nav-item dropdown-menu-list">
                <a href="#">@T("NopStation.MegaMenu.Public.Manufacturers")</a>
                <div class="sublist-toggle"></div>
                <div class="mm-dropdown">
                    <ul class="mm-dropdown-list">
                        @foreach (var manufacturer in Model.Manufacturers)
                        {

                            <li class="sublist-close-button">
                                <button class="mm-close-button">
                                    <i class="fas fa-times"></i>
                                </button>
                            </li>
                            <li class="nav-item dropdown">
                                <a href="@Url.RouteUrl("Manufacturer", new { SeName = manufacturer.SeName })">
                                    @if (manufacturer.PictureModel != null && !string.IsNullOrEmpty(manufacturer.PictureModel.ImageUrl))
                                    {
                                        <img class="img-fluid" src="@manufacturer.PictureModel.ImageUrl" alt="@manufacturer.PictureModel.ThumbImageUrl" />
                                    }
                                    <span>@manufacturer.Name</span>
                                </a>
                            </li>
                        }
                    </ul>
                    <div class="all-manufacture"><a href="@Url.RouteUrl("ManufacturerList")">@T("NopStation.MegaMenu.Public.AllManufacturers")</a></div>
                </div>
            </li>
        }

        @foreach (var topic in Model.Topics)
        {
            <li class="mm-nav-item first-lebel-nav"><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
        }

        @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
        {
            <li class="mm-nav-item first-lebel-nav"><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
        }

        @if (Model.DisplayProductSearchMenuItem)
        {
            <li class="mm-nav-item first-lebel-nav"><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
        }
        @if (Model.DisplayCustomerInfoMenuItem)
        {
            <li class="mm-nav-item first-lebel-nav"><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
        }
        @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
        {
            <li class="mm-nav-item first-lebel-nav"><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
        }
        @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
        {
            <li class="mm-nav-item first-lebel-nav"><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
        }
        @if (Model.DisplayContactUsMenuItem)
        {
            <li class="mm-nav-item first-lebel-nav"><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
        }

        @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.HeaderMenuAfter })
    </ul>
</div>

<div class="menu-toggle-btn"><span class="icon icon-navbar rotate-y-180"></span></div>
<ul class="top-menu mobile mobile-menu">
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MobHeaderMenuBefore })
    @{
        <div><button type="button" class="btn-close-menu" id="close-menu">X</button></div>
    }

    @if (Model.DisplayHomePageMenuItem)
    {
        <li class="nav-item"><a href="@Url.RouteUrl("HomePage")">@T("HomePage")</a></li>
    }
    @foreach (var category in Model.Categories)
    {
        var categoryLineModel = new MegaMenuModel.CategoryLineModel
        {
            Category = category
        };
        @await Html.PartialAsync("_CategoryLine.MegaMenu.cshtml", categoryLineModel)
    }
    @foreach (var topic in Model.Topics)
    {
        <li class="nav-item"><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
    }
    @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
    {
        <li class="nav-item"><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
    }
    @if (Model.DisplayProductSearchMenuItem)
    {
        <li class="nav-item"><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
    }
    @if (Model.DisplayCustomerInfoMenuItem)
    {
        <li class="nav-item"><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
    }
    @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
    {
        <li class="nav-item"><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
    }
    @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
    {
        <li class="nav-item"><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
    }
    @if (Model.DisplayContactUsMenuItem)
    {
        <li class="nav-item"><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
    }
    @await Component.InvokeAsync(typeof(WidgetViewComponent), new { widgetZone = PublicWidgetZones.MobHeaderMenuAfter })
</ul>

<script asp-location="Footer">
    $(document).ready(function () {
        $(".mm-close-button ").on("click", function (e) {
            console.log("close button clicked");
            $(this).parent(".mm-navbar.active").removeClass("active");
            $(this).parent(".sublist-close-button").parent(".sublist.active").removeClass("active");
            $(this).parent(".sublist-close-button").parent(".mm-dropdown-list").parent(".mm-dropdown.active").removeClass("active");
            if ($(".mm-navbar").hasClass("active")) {

            } else {
                $("body").removeClass("mm-menu-opened");
                $(".header-menu").removeClass("active");
            }
            e.stopPropagation();
        })
        $(".menu-toggle-btn").on("click", function (e) {
            $(".mm-navbar").addClass("active");
            $(".header-menu").addClass("active");
            $("body").addClass("mm-menu-opened");
            e.stopPropagation();
        })

        $(".mm-nav-item .sublist-toggle").on("click", function (e) {
            e.preventDefault();
            $(this).siblings(".sublist").addClass("active");
            $(this).siblings(".mm-dropdown").addClass("active");
            e.stopPropagation();
        })

        $(".mm-navbar").on("click", function (e) {
            e.stopPropagation();
        })

        $(window).on("resize", function () {
            $(".header-menu").removeClass("active");
            $(".header-menu .active").removeClass("active");
            $(".mm-dropdown.active").removeClass("active")
            $("body").removeClass("mm-menu-opened");
        })
        $(document).on("click", function () {
            $(".mm-navbar, .sublist").removeClass("active");
            $(".header-menu").removeClass("active");
            $(".mm-dropdown.active").removeClass("active")
            $("body").removeClass("mm-menu-opened");
        })
    })
</script>
